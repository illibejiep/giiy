<?php

/**
 * This is the model base class for the table "picture".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giiy.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Picture".
 *
 * Columns in table "picture" available as properties of the model,
 * followed by relations of table "picture" available as properties of the model.
 *
 * @property integer $id
 * @property integer $type_enum
 * @property string $name
 * @property integer $width
 * @property integer $height
 * @property string $created
 * @property string $modified
 * @property string $description
 * @property string $announce
 *
 * @property Video[] $videos
 *
 * @property PictureTypeEnum $type
 */
abstract class BaseGiiyPicture extends GiiyActiveRecord implements ITypeEnumerable {
                /** @var PictureTypeEnum */
        protected $_type;

                                	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'giiy_picture';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Picture|Pictures', $n);
	}

	public function rules() {
		return array(
			array('created, modified', 'required'),
			array('type_enum, width, height', 'numerical', 'integerOnly'=>true),
			array('name, description, announce', 'safe'),
			array('type_enum, name, width, height, description, announce', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, type_enum, name, width, height, created, modified, description, announce', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'videos' => array(self::HAS_MANY, 'Video', 'picture_id'),
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'type_enum' => Yii::t('app', 'Type Enum'),
			'name' => Yii::t('app', 'Name'),
			'width' => Yii::t('app', 'Width'),
			'height' => Yii::t('app', 'Height'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'description' => Yii::t('app', 'Description'),
			'announce' => Yii::t('app', 'Announce'),
			'videos' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('t.id', $this->getAttribute('id'));
		$criteria->compare('t.type_enum', $this->getAttribute('type_enum'));
		$criteria->compare('t.name', $this->getAttribute('name'), true);
		$criteria->compare('t.width', $this->getAttribute('width'));
		$criteria->compare('t.height', $this->getAttribute('height'));
		$criteria->compare('t.created', $this->getAttribute('created'), true);
		$criteria->compare('t.modified', $this->getAttribute('modified'), true);
		$criteria->compare('t.description', $this->getAttribute('description'), true);
		$criteria->compare('t.announce', $this->getAttribute('announce'), true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

    public function getType() {
        if ($this->getAttribute('type_enum') === null)
            return null;

        if ($this->_type === null)
            $this->_type = new PictureTypeEnum($this->getAttribute('type_enum'));

        return $this->_type;
    }

    public function setType($value) {
        if ($value instanceof PictureTypeEnum) {
            $this->_type = $value;
            $this->setAttribute('type_enum', $value->id);
        } elseif (is_numeric($value)) {
            $this->_type = new PictureTypeEnum($value);
            $this->setAttribute('type_enum', $value);
        } else {
            throw new CExeption('Wrong enum value for Picture.type');
        }

        return $this;
    }
    
    public function getTypesFields()
    {
        $typesFields = array();
        foreach (PictureTypeEnum::$names as $id => $name) {
            $typesFields[$id] = array(
                'type',
                'name',
                'width',
                'height',
                'description',
                'announce',
                'videos',
            );
        }

        return $typesFields;
    }

    }