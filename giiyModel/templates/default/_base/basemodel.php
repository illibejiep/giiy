<?="<?php\n"; ?>

/**
 * This is the model base class for the table "<?=$tableName; ?>".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giiy.
 * If any changes are necessary, you must set or override the required
 * property or method in class "<?=$modelClass; ?>".
 *
 * Columns in table "<?=$tableName; ?>" available as properties of the model,
<? if(!empty($relations)): ?>
 * followed by relations of table "<?=$tableName; ?>" available as properties of the model.
<? else: ?>
 * and there are no model relations.
<? endif; ?>
 *
<? foreach($columns as $column): ?>
 * @property <?=$column->type.' $'.$column->name."\n"; ?>
<? endforeach; ?>
 *
<? foreach(array_keys($relations) as $name): ?>
 * @property <?
	$relationData = $this->getRelationData($modelClass, $name);
	$relationType = $relationData[0];
	$relationModel = $relationData[1];

	switch($relationType) {
		case CActiveRecord::BELONGS_TO:
		case CActiveRecord::HAS_ONE:
			echo $relationModel;
			break;
		case CActiveRecord::HAS_MANY:
		case CActiveRecord::MANY_MANY:
			echo $relationModel . '[]';
			break;
		default:
			echo 'mixed';
	}
	echo ' $' . $name . "\n";
	?>
<? endforeach; ?>
 *
<? foreach($columns as $column): ?>
<? if (substr($column->name,-5) == '_enum'):?>
 * @property <?=$modelClass; ?><?=$this->generateClassName($column->name);?> $<?=lcfirst($this->generateClassName(substr($column->name,0,-5)))."\n";?>
<? endif;?>
<? endforeach;?>
 */
abstract class <?=$this->baseModelClass; ?> extends GiiyActiveRecord <? if(array_key_exists('type_enum',$columns)):?>implements ITypeEnumerable <? endif;?>{
<? foreach($columns as $column): ?>
    <? if (substr($column->name,-5) == '_enum'):?>
        /** @var <?=$modelClass; ?><?=$this->generateClassName($column->name);?> */
        protected $_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?>;

    <? endif;?>
<? endforeach;?>
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '<?=$tableName; ?>';
	}

	public static function label($n = 1) {
		return Yii::t('app', '<?=$modelClass; ?>|<?=$this->pluralize($modelClass); ?>', $n);
	}

	public function rules() {
		return array(
<? foreach($rules as $rule): ?>
			<?=$rule.",\n"; ?>
<? endforeach; ?>
			array('<?=implode(', ', array_keys($columns)); ?>', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
<? foreach($relations as $name=>$relation): ?>
			<?="'{$name}' => {$relation},\n"; ?>
<? endforeach; ?>
		);
	}

	public function attributeLabels() {
		return array(
<? foreach($labels as $name=>$label): ?>
<? if($label === null): ?>
			<?="'{$name}' => null,\n"; ?>
<? else: ?>
			<?="'{$name}' => {$label},\n"; ?>
<? endif; ?>
<? endforeach; ?>
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

<? foreach($columns as $name=>$column): ?>
<? if ($name != 'params'):?>
<? $partial = ($column->type==='string' and !$column->isForeignKey); ?>
		$criteria->compare('t.<?=$name; ?>', $this->getAttribute('<?=$name; ?>')<?=$partial ? ', true' : ''; ?>);
<? endif;?>
<? endforeach; ?>

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

<? foreach($columns as $column): ?>
<? if (substr($column->name,-5) == '_enum'):?>
    public function get<?=$this->generateClassName(substr($column->name,0,-5));?>() {
        if ($this->getAttribute('<?=$column->name;?>') === null)
            return null;

        if ($this->_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?> === null)
            $this->_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?> = new <?=$modelClass; ?><?=$this->generateClassName($column->name);?>($this->getAttribute('<?=$column->name;?>'));

        return $this->_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?>;
    }

    public function set<?=$this->generateClassName(substr($column->name,0,-5));?>($value) {
        if ($value instanceof <?=$modelClass; ?><?=$this->generateClassName($column->name);?>) {
            $this->_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?> = $value;
            $this->setAttribute('<?=$column->name;?>', $value->id);
        } elseif (is_numeric($value)) {
            $this->_<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?> = new <?=$modelClass; ?><?=$this->generateClassName($column->name);?>($value);
            $this->setAttribute('<?=$column->name;?>', $value);
        } else {
            throw new CExeption('Wrong enum value for <?=$modelClass; ?>.<?=lcfirst($this->generateClassName(substr($column->name,0,-5)));?>');
        }

        return $this;
    }
    <? if ($column->name == 'type_enum'):?>

    public function getTypesFields()
    {
        $typesFields = array();
        foreach (<?=$modelClass; ?>TypeEnum::$names as $id => $name) {
            $typesFields[$id] = array(
<? foreach($columns as $column): ?>
<? if ($column->isPrimaryKey
    || $column->isForeignKey
    || in_array($column->name,array('created','modified'))
) continue; ?>
<? if (substr($column->name,-5) == '_enum'):?>
<?
    $words = explode('_',$column->name);
    array_pop($words);
    $words = array_map('ucfirst',$words);
    $columnName = lcfirst(join('',$words));
?>
                '<?=$columnName;?>',
<? else:?>
                '<?=$column->name;?>',
<? endif; ?>
<? endforeach; ?><? foreach (array_keys($relations) as $name): ?>
                '<?=$name;?>',
<? endforeach; ?>
            );
        }

        return $typesFields;
    }

    <? endif;?>
<? endif;?>
<? endforeach;?>
}